{"version":3,"sources":["Components/Results.jsx","Components/Popup.jsx","Components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Results","props","className","onClick","handleItemClick","movie","imdbID","Title","src","Poster","alt","Popup","trigger","Ratings","style","display","close","Year","Plot","Actors","JSON","stringify","ratings","imdbRating","Metascore","Search","useState","query","results","Valid","id","detailedInfo","state","setState","searchURL","prevValue","fetch","then","resp","json","data","onSubmit","e","preventDefault","length","axios","catch","type","placeholder","onChange","newValue","target","value","map","item","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.8ed10d15.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction Results(props) {\r\n    return (\r\n        <div className=\"Result\" onClick={() => props.handleItemClick(props.movie.imdbID)}>\r\n            <h1 className=\"Result_title\">{props.movie.Title}</h1>\r\n            <img className=\"Result_image\" src={props.movie.Poster} alt={props.movie.Title} />\r\n            \r\n        </div>\r\n    ) \r\n}\r\nexport default Results;","import React from 'react'\r\n\r\nfunction Popup(props) {\r\n    let ratings = props.trigger.Ratings\r\n    return (\r\n        <div className=\"popup\" style={{display: props.trigger ? \"block\" : \"none\"}}>\r\n            <div className=\"popup_close\" onClick={props.close}>\r\n            <h3>Close</h3>\r\n            </div>\r\n            <header>\r\n                <h1>{props.trigger.Title}({props.trigger.Year})</h1>\r\n            </header>\r\n            <div className=\"popup_image\">\r\n                <img src={props.trigger.Poster} alt={props.trigger.Title}/>\r\n                <div className=\"popup_content\">\r\n                    <h2>{props.trigger.Plot}</h2>\r\n                    <div className=\"popup_content_cast\">\r\n                        <h3>Starring:</h3> <h2>{props.trigger.Actors}</h2>\r\n                    </div>\r\n                    <div className=\"popup_content_rating\">\r\n                        {JSON.stringify.ratings}\r\n                        \r\n                        <h3>IMDB: </h3><h2>{props.trigger.imdbRating}</h2>\r\n                        <h3>MetaScore: </h3><h2>{props.trigger.Metascore}</h2>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Popup;\r\n","import React, { useState } from 'react';\r\nimport Results from \"./Results\";\r\nimport axios from \"axios\";\r\nimport Popup from \"./Popup\";\r\n\r\n\r\nfunction Search() {\r\n    let [state, setState] = useState({\r\n        query: \"\",\r\n        results: [],\r\n        Valid: false,\r\n        id: \"\",\r\n        detailedInfo: \"\"\r\n    })\r\n\r\n    let apiKey = \"e9b430ec\";\r\n    let searchURL = `https://www.omdbapi.com/?apikey=${apiKey}&s=${state.query}`;\r\n    let detailedInfo = `https://www.omdbapi.com/?apikey=${apiKey}&i=`\r\n    \r\n    let handleChange = e => {\r\n        let newValue = e.target.value;\r\n            setState(prevValue => {\r\n                return {\r\n                    ...prevValue,\r\n                    query: newValue\r\n                }\r\n            })\r\n        \r\n    }\r\n\r\n    let handleSubmit = e => {\r\n        e.preventDefault();\r\n        if(state.query.length>0) {\r\n            axios(searchURL)\r\n            .then(resp => \r\n                setState(prevValue => {\r\n                    return {\r\n                        ...prevValue,\r\n                        results: resp.data.Search,\r\n                        Valid: true   \r\n                    }\r\n                \r\n            })).catch(e => {\r\n                return (e)\r\n            }) \r\n        }\r\n        setState(prevValue => {\r\n            return{\r\n                ...prevValue,\r\n                query: \"\"\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    let handleItemClick = id => {\r\n        setState(prevValue => {\r\n            return {\r\n            ...prevValue,\r\n            id: id\r\n            }\r\n        })\r\n        fetch(detailedInfo+id)\r\n        .then(resp => resp.json())\r\n        .then(data => {\r\n            setState(prevValue => {\r\n                return (\r\n                    {\r\n                        ...prevValue,\r\n                        detailedInfo: data\r\n                    }\r\n                )\r\n            })\r\n        })\r\n    }\r\n\r\n    let handlePopupClose = () => {\r\n        setState(prevValue => {\r\n            return {\r\n                ...prevValue,\r\n                detailedInfo:\"\"\r\n            }\r\n        })\r\n    }\r\n   \r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit} className=\"Search_form\">\r\n            <div className=\"inputField\">              \r\n                <input type=\"text\" placeholder=\"Start typing...\" onChange={handleChange} value={state.query} />   \r\n            </div>\r\n                <br />\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n            <div className=\"resultsinSearch\">\r\n                {state.results.map(item => {\r\n                    return (\r\n                        <Results key={item.imdbID} movie={item} query={state.query}  handleItemClick={handleItemClick}/>\r\n                    )\r\n                })}\r\n            </div>\r\n            <Popup trigger={state.detailedInfo} close={handlePopupClose}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\nimport Search from \"./Components/Search\";\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"App_title\">\n      <h1>The Movie Database</h1>\n      \n    </div> \n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}